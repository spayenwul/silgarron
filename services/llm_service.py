# services/llm_service.py
import os
from typing import List
import google.generativeai as genai
from dotenv import load_dotenv
from typing import List, Optional
import json
from utils.logger import log_llm_interaction 
from logic.constants import *
from utils.prompt_manager import load_and_format_prompt
from logic.constants import *

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–∞—à API –∫–ª—é—á) –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

API_KEY = os.getenv("GEMINI_API_KEY")
MODEL_NAME = os.getenv("GEMINI_MODEL", "gemini-2.5-pro") 


try:
    if not API_KEY:
        raise ValueError("–ö–ª—é—á API Gemini –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é GEMINI_API_KEY.")
    
    genai.configure(api_key=API_KEY)
    print(f"–°–µ—Ä–≤–∏—Å Gemini —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å: {MODEL_NAME}")

except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini: {e}")


def generate_location_description(tags: List[str], context: Optional[List[str]] = None) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    —Ñ–æ—Ä–º–∏—Ä—É—è –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
    """
    # --- –®–∞–≥ 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ---

    # 1.1. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: —Å—Ç—Ä–æ–∫–∞ —Å —Ç–µ–≥–∞–º–∏
    tags_str = ", ".join(tags)

    # 1.2. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –±–ª–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_block = "" # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    if context:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å—Ç—å, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ü–µ–ª—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞
        context_items_str = "\n".join(f"- {item}" for item in context)
        context_block = (
            "\n–£—á—Ç–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –º–∏—Ä–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª—É—Ö, —Ñ–∞–∫—Ç –∏–ª–∏ –ø—Ä–æ—à–ª–æ–µ —Å–æ–±—ã—Ç–∏–µ):"
            f"\n{context_items_str}"
        )

    # --- –®–∞–≥ 2: –í—ã–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ ---
    # –ü–µ—Ä–µ–¥–∞–µ–º –µ–º—É –≤—Å–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    prompt = load_and_format_prompt(
        'location_description',
        tags_str=tags_str,
        context_block=context_block
    )

    # --- –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ API ---
    return _send_prompt_to_gemini(prompt)

def generate_combat_action_result(combat_log: List[str], lore: List[str], player_action: str) -> str:
    log_str = "\n".join(combat_log)
    lore_str = "\n".join(lore) if lore else "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
    
    prompt = load_and_format_prompt(
        'combat_action',
        narrative_key=NARRATIVE,
        state_changes_key=STATE_CHANGES,
        damage_player_key=DAMAGE_PLAYER,
        combat_log=log_str,
        lore=lore_str,
        player_action=player_action
    )
    
    return _send_prompt_to_gemini(prompt)

def _send_prompt_to_gemini(prompt: str) -> str:
    """
    –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª—é–±–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤ Gemini.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∞–º –≤—ã–∑–æ–≤ API, –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –±–∞–∑–æ–≤—ã–µ –æ—à–∏–±–∫–∏.
    """
    raw_response = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞
    try:
        # 1. –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å.
        model = genai.GenerativeModel(MODEL_NAME)
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        print("...–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini...")
        response = model.generate_content(prompt)
        raw_response = response.text.strip()
        
        return raw_response

    except Exception as e:
        print(f"üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê API Gemini: {e}")
        raw_response = """
        {
          "{NARRATIVE}": "–í –º–∏—Ä–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–æ—à–µ–ª —Å–±–æ–π...",
          "{STATE_CHANGES}": {}
        }
        """
        return raw_response
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ    
    finally:
        if prompt and raw_response:
             log_llm_interaction(prompt, raw_response)