# services/memory_service.py
import chromadb
from typing import List, Dict, Any
from logic.constants import META_TYPE, TYPE_EVENT, TYPE_LORE

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç ChromaDB. 
# –û–Ω —Å–æ–∑–¥–∞—Å—Ç —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞.
client = chromadb.Client()

# –°–æ–∑–¥–∞–µ–º "–∫–æ–ª–ª–µ–∫—Ü–∏—é" (–∞–Ω–∞–ª–æ–≥ —Ç–∞–±–ª–∏—Ü—ã –≤ SQL). 
# –ï—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–µ–π.
# embedding_function - —ç—Ç–æ —Ç–æ, –∫–∞–∫ Chroma –±—É–¥–µ—Ç –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –≤–µ–∫—Ç–æ—Ä—ã.
# –ú—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç.
collection = client.get_or_create_collection(name="game_world_lore")

class MemoryService:
    def add_memory(self, text: str, memory_id: str, metadata: Dict[str, Any]):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏.
        """
        try:
            collection.add(
                documents=[text],
                ids=[memory_id],
                metadatas=[metadata]
            )
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–∏–ø–∞ '{metadata.get(META_TYPE)}' —Å ID: {memory_id}")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {e}")

    def retrieve_relevant_memories(self, query_text: str, n_results: int = 2, filter_metadata: Dict[str, Any] = None) -> List[str]:
        """
        –ò—â–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Ñ–∏–ª—å—Ç—Ä—É—è –ø–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º
        —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è ChromaDB.
        """
        query_options = {
            "query_texts": [query_text],
            "n_results": n_results
        }

        if filter_metadata:
            log_message = ", ".join(f"{k}: {v}" for k, v in filter_metadata.items())
            print(f"üß† –ü–æ–∏—Å–∫ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π ({log_message}), —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å: '{query_text}'...")

            # --- –ö–û–ù–í–ï–†–¢–ï–† –§–ò–õ–¨–¢–†–ê ---
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–æ—Ä–º–∞—Ç, –ø–æ–Ω—è—Ç–Ω—ã–π ChromaDB
            conditions = []
            for key, value in filter_metadata.items():
                conditions.append({key: {"$eq": value}})
            
            if len(conditions) > 1:
                chroma_where_filter = {"$and": conditions}
            elif len(conditions) == 1:
                chroma_where_filter = conditions[0]
            else:
                chroma_where_filter = {} # –ü—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å –±—ã–ª –ø—É—Å—Ç

            if chroma_where_filter:
                query_options["where"] = chroma_where_filter
        else:
            print(f"üß† –ü–æ–∏—Å–∫ –æ–±—â–∏—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å: '{query_text}'...")
        
        results = collection.query(**query_options)
        
        retrieved = results['documents'][0]
        if retrieved:
            print(f"üìö –ù–∞–π–¥–µ–Ω–æ: {retrieved}")
        else:
            print("üìö –ù–∏—á–µ–≥–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
        return retrieved