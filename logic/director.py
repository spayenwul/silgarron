from typing import List
from logic.game_states import GameState
# –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'import game' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º type hint –≤ –∫–∞–≤—ã—á–∫–∞—Ö: 'game.Game'
import game
import services.llm_service as llm
from logic.constants import *
from services.intent_service import IntentService
import json
from utils.prompt_manager import load_and_format_prompt 

class Director:
    # –ü–µ—Ä–≤—ã–º –∏–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ –æ—Ç all-MiniLM-L6-v2 –ø–æ data\intents.json
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç Director –∏ –µ–≥–æ –ø–æ–¥—Å–∏—Å—Ç–µ–º—ã, —Ç–∞–∫–∏–µ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π."""
    def __init__(self):
        self.intent_service = IntentService()

    def decide_llm_action(self, game_instance: 'game.Game', player_command: str) -> str:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥-–º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä. –†–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        –∏ –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É.
        """
        
        # --- –®–ê–ì 1: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è ---
        intent = self.intent_service.recognize_intent(player_command)
        
        # --- –®–ê–ì 2: –ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        
        # –¢—Ä–∏–≥–≥–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ –±–æ—è
        if intent == "COMBAT" and game_instance.state != GameState.COMBAT:
            game_instance.change_state(GameState.COMBAT)

        # –í—ã–±–æ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¢–ï–ö–£–©–ï–ì–û —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        if game_instance.state == GameState.COMBAT:
            return self._handle_combat(game_instance, player_command, recognized_intent=intent)
                       
        # (–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è DIALOGUE –∏ –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤)

        if intent == "UNKNOWN":
            # –ï—Å–ª–∏ –º—ã –Ω–µ –ø–æ–Ω—è–ª–∏, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
            intent = "EXPLORATION" 
            print("‚ö†Ô∏è –ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EXPLORATION –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏–ª–∏ –µ—Å–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è
        return self._handle_exploration(game_instance, player_command, recognized_intent=intent)

    def _handle_exploration(self, game_instance: 'game.Game', command: str, recognized_intent: str) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø."""
        print("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä: –°—Ü–µ–Ω–∞ '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'.")
       
        if recognized_intent == "UNKNOWN":
            print("‚ö†Ô∏è –ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EXPLORATION –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        
        # 1. –°–±–æ—Ä–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        search_query = f"{' '.join(game_instance.current_location.tags)} {command}"
        memories_list = game_instance._get_layered_context(search_query)
        memories_str = "\n".join(f"- {item}" for item in memories_list) if memories_list else "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π."

        # 2. –°–±–æ—Ä–∫–∞ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        context_dict = game_instance.get_context_for_llm()
        context_json_str = json.dumps(context_dict, ensure_ascii=False, indent=2)
        
        # 3. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        prompt_template_name = 'exploration_action'
        prompt = load_and_format_prompt(
            prompt_template_name,
            narrative_key=NARRATIVE,
            state_changes_key=STATE_CHANGES,
            new_game_state_key=NEW_GAME_STATE,
            memories=memories_str,
            context_json=context_json_str,
            player_action=command
        )
        
        # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –≤ LLM-—Å–µ—Ä–≤–∏—Å
        llm_request = {
            "prompt": prompt,
            "prompt_template_name": prompt_template_name,
            "game_state": game_instance.state.name
        }
        return llm._send_prompt_to_gemini(llm_request)

    def _handle_combat(self, game_instance: 'game.Game', command: str, recognized_intent: str) -> str:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–∂–∏–º–∞ –ë–û–Ø."""
        print("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä: –°—Ü–µ–Ω–∞ '–ë–æ–π'.")

        if recognized_intent == "UNKNOWN":
            print("‚ö†Ô∏è –ù–∞–º–µ—Ä–µ–Ω–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è EXPLORATION –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")

        # 1. –°–±–æ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        log_str = "\n".join(game_instance.short_term_memory)
        
        search_query = f"—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–ª–∏ —Ç–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ {' '.join(game_instance.current_location.tags)}"
        lore_list = game_instance.memory_service.retrieve_relevant_memories(
            search_query, n_results=1, filter_metadata={META_TYPE: TYPE_LORE}
        )
        lore_str = "\n".join(lore_list) if lore_list else "–ù–µ—Ç –æ—Å–æ–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö."
        
        # 2. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        prompt_template_name = 'combat_action'
        prompt = load_and_format_prompt(
            prompt_template_name,
            narrative_key=NARRATIVE,
            state_changes_key=STATE_CHANGES,
            damage_player_key=DAMAGE_PLAYER,
            new_event_key=NEW_EVENT,
            add_item_key=ADD_ITEM,
            new_game_state_key=NEW_GAME_STATE,
            lore=lore_str,
            combat_log=log_str,
            player_action=command
        )
        
        # 3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ –≤ LLM-—Å–µ—Ä–≤–∏—Å
        llm_request = {
            "prompt": prompt,
            "prompt_template_name": prompt_template_name,
            "game_state": game_instance.state.name
        }
        return llm._send_prompt_to_gemini(llm_request)