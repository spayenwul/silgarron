# logic/director.py
from typing import List
from logic.game_states import GameState
# –í–∞–∂–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º 'import game' —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
# –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º type hint –≤ –∫–∞–≤—ã—á–∫–∞—Ö: 'game.Game'
import game 
import services.llm_service as llm

class Director:
    def decide_llm_action(self, game_instance: 'game.Game', player_command: str) -> str:
        """
        –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.
        """
        if game_instance.state == GameState.EXPLORATION:
            return self._handle_exploration(game_instance, player_command)
        elif game_instance.state == GameState.COMBAT:
            return self._handle_combat(game_instance, player_command)
        
        return "–†–µ–∂–∏—Å—Å—ë—Ä –≤ –∑–∞–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–µ –∏ –Ω–µ –∑–Ω–∞–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å."

    def _handle_exploration(self, game_instance: 'game.Game', command: str) -> str:
        print("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä: –°—Ü–µ–Ω–∞ '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'.")
        # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è ---
        # 1. –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ (LTM)
        search_query = f"{' '.join(game_instance.current_location.tags)} {command}"
        memories = game_instance._get_layered_context(search_query)

        # 2. –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∏—Ç—É–∞—Ü–∏—é
        context = game_instance.get_context_for_llm()

        # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ë–´–ß–ù–´–ô –ø—Ä–æ–º–ø—Ç
        return llm.generate_action_result(context, memories, command)

    def _handle_combat(self, game_instance: 'game.Game', command: str) -> str:
        print("üé¨ –†–µ–∂–∏—Å—Å—ë—Ä: –°—Ü–µ–Ω–∞ '–ë–æ–π'.")
        # --- –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –±–æ—è ---
        # 1. –°–æ–±–∏—Ä–∞–µ–º –í–ï–°–¨ –ª–æ–≥ –±–æ—è –∏–∑ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ü–∞–º—è—Ç–∏ (STM)
        combat_log = game_instance.short_term_memory

        # 2. –ò—â–µ–º –≤ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ü–∞–º—è—Ç–∏ (LTM) —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ —Ñ–∞–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É—è–∑–≤–∏–º–æ—Å—Ç–∏)
        search_query = f"—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∏–ª–∏ —Ç–∞–∫—Ç–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ {' '.join(game_instance.current_location.tags)}"
        lore = game_instance.memory_service.retrieve_relevant_memories(
            search_query, n_results=1, filter_metadata={"type": "lore"}
        )

        # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô –±–æ–µ–≤–æ–π –ø—Ä–æ–º–ø—Ç
        return llm.generate_combat_action_result(combat_log, lore, command)