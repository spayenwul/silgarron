import datetime
import json
from pathlib import Path
import functools

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
LOG_DIR = Path(__file__).parent.parent / "logs"
GAME_LOG_FILE = LOG_DIR / "game_events.log"
LLM_TRACE_FILE = LOG_DIR / "llm_trace.jsonl"


def setup_logging():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç."""
    LOG_DIR.mkdir(exist_ok=True)


# --- "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π" –ª–æ–≥ ---
def log_game_event(tag: str, message: str):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥.
    –ü—Ä–∏–º–µ—Ä: log_game_event("STATE_CHANGE", "EXPLORATION -> COMBAT")
    """
    try:
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_entry = f"[{timestamp}] [{tag.upper()}] {message}\n"
        
        with open(GAME_LOG_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry)
            
    except Exception as e:
        print(f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥: {e}")


# --- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –ª–æ–≥ "–ß–µ—Ä–Ω—ã–π —è—â–∏–∫" ---
def log_llm_trace(trace_data: dict):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ª–µ–¥ –≤—ã–∑–æ–≤–∞ LLM –≤ JSONL —Ñ–∞–π–ª.
    """
    try:
        trace_data["timestamp"] = datetime.datetime.now().isoformat()
        log_entry = json.dumps(trace_data, ensure_ascii=False) + "\n"
        
        with open(LLM_TRACE_FILE, "a", encoding="utf-8") as f:
            f.write(log_entry)
            
    except Exception as e:
        print(f"üî¥ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ LLM trace –ª–æ–≥: {e}")


# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–æ–¥–∞ ---
def log_player_input(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≥–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç (–∫–æ–º–∞–Ω–¥—É) —Ñ—É–Ω–∫—Ü–∏–∏."""
    @functools.wraps(func)
    def wrapper(game_instance, command: str, *args, **kwargs):
        log_game_event("PLAYER_INPUT", command)
        result = func(game_instance, command, *args, **kwargs)
        return result
    return wrapper

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
# –í—ã–∑—ã–≤–∞–µ–º setup –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è, —á—Ç–æ–±—ã –ø–∞–ø–∫–∞ 'logs' –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
setup_logging()